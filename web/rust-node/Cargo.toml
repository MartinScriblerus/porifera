[package]
name = "rust-node"
version = "0.1.0"
license = "ISC"
edition = "2018"
exclude = ["index.node"]

[lib]
crate-type = ["cdylib", "rlib"]

features = ["console_error_panic_hook"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies.neon]
version = "0.10"
default-features = false
features = ["napi-6"]


[dependencies]
num_cpus = "1"
wasm-bindgen = "0.2.80"
js-sys = "0.3.57"
wasm-bindgen-futures = "0.4.30"
pitch-detection = "0.2.0"
imp = "0.1.0"
libloading = "0.7.3"
getrandom = { version = "0.2", features = ["js"] }

object-pool = "0.5.3"
rustfft = { version = "5.0.1", default-features = false }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

[dependencies.pyo3]

[features]
extension-module = ["pyo3/extension-module"]
default = ["extension-module"]

[build-dependencies]
pyo3-build-config = "^0.14"


[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

